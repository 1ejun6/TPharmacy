@page "/payments"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

<div class="container mt-5">
    <h1 class="header">Overview of TPharmacy Payment's</h1>
    <h3>Welcome to the Payment Home! </h3>
    <div class="row">
        <div class="col-md-8">
            <br />
        </div>
        <div class="col-md-2.5">
            <br />
            <input type="text" class="form-control" placeholder="Search Payment by ID" @bind="SearchString" @onkeyup="FilterUser" />
        </div>
        <div class="col-md-1">
            <br />
            <button class="btn btn-light" @onclick="ResetSearch">
                Reset/Refresh
            </button>
        </div>
    </div>
    <br />
    @if (Payments == null)
    {
        <div class="alert alert-info">Loading payments...</div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-striped align-middle table-bordered">
                <thead class="table">
                    <tr>
                        <th>ID</th>
                        <th>OrderID</th>
                        <th>CusAddress</th>
                        <th></th>
                        <th>TotalFee</th>
                        <th>CardInfo</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var payment in Payments)
                    {
                    <tr>
                        <td>@payment.ID</td>
                        <td>@payment.OrderID</td>
                        @if (payment.OrderID == payment.Order.ID)
                        {
                            <td>@payment.Order.Customer.CusAddress</td>
                            <td>@payment.Order.OrderPrice+@payment.PayFee</td>
                        }
                        <td>@payment.PayFee</td>
                        <td>@payment.PayCardInfo</td>
                    </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>


@code {
    private string SearchString { get; set; }
    private List<Payment> Payments;

    protected async override Task OnInitializedAsync()
    {
        Payments = await _client.GetFromJsonAsync<List<Payment>>($"{Endpoints.PaymentsEndpoint}");
    }

    protected async void FilterUser()
    {
        if (!string.IsNullOrEmpty(SearchString))
        {
            int searchInt;
            if (int.TryParse(SearchString, out searchInt))
            {
                Payments = await _client.GetFromJsonAsync<List<Payment>>($"{Endpoints.PaymentsEndpoint}");
            }
        }
        {
            SearchString = string.Empty;
            Payments = await _client.GetFromJsonAsync<List<Payment>>($"{Endpoints.PaymentsEndpoint}");
        }
    }

    public async void ResetSearch()
    {
        if (!string.IsNullOrEmpty(SearchString))
        {
            SearchString = string.Empty;
            Payments = await _client.GetFromJsonAsync<List<Payment>>($"{Endpoints.PaymentsEndpoint}");
        }
    }
}

@page "/payments"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

<h3 class="card-title">Car Payments</h3>
@if (Payments == null)
{
    <div class="alert alert-info">Loading Payments...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Name</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var payment in Payments)
            {
                <tr>
                    <td>@payment.ID</td>
                    <td>
                        <a href="/colours/view/@payment.ID" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/colours/edit/@payment.ID" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(payment.ID))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Payment> Payments;

    protected async override Task OnInitializedAsync()
    {
        Payments = await _client.GetFromJsonAsync<List<Payment>>($"{Endpoints.PaymentsEndpoint}");
    }

    async Task Delete(int paymentID)
    {
        var payment = Payments.First(q => q.ID == paymentID);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {payment.ID}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.PaymentsEndpoint}/{paymentID}");
            await OnInitializedAsync();
        }
    }
}

@page "/orders"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

<div class="container mt-5">
    <h1 class="header">Overview of TPharmacy Order's</h1>
    <h3>Welcome to the Order Home! </h3>
    <div class="row">
        <div class="col-md-8">
            <br />
        </div>
        <div class="col-md-2.5">
            <br />
            <input type="text" class="form-control" placeholder="Search Order by ID" @bind="SearchString" @onkeyup="FilterUser" />
        </div>
        <div class="col-md-1">
            <br />
            <button class="btn btn-light" @onclick="ResetSearch">
                Reset
            </button>
        </div>
    </div>
    <br />
    @if (Orders == null)
    {
        <div class="alert alert-info">Loading orders...</div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-striped align-middle table-bordered">
                <thead class="table">
                    <tr>
                        <th>ID</th>
                        <th>StaffID</th>
                        <th>DateTime</th>
                        <th>Price</th>
                        <th>CusID</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var order in Orders)
                    {
                    <tr>
                        <td>@order.ID</td>
                        <td>@order.StaffID</td>
                        <td>@order.OrderDateTime</td>
                        <td>@order.OrderPrice</td>
                        @*<td>@order.CusID</td>*@
                    </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    private string SearchString { get; set; }
    private List<Order> Orders;

    protected async override Task OnInitializedAsync()
    {
        Orders = await _client.GetFromJsonAsync<List<Order>>($"{Endpoints.OrdersEndpoint}");
    }

    protected void FilterUser()
    {
        if (!string.IsNullOrEmpty(SearchString))
        {
            int searchInt;
            if (int.TryParse(SearchString, out searchInt))
            {
                Orders = Orders.Where(x => x.ID == searchInt).ToList();
            }
        }
    }

    public async void ResetSearch()
    {
        SearchString = string.Empty;
        Orders = await _client.GetFromJsonAsync<List<Order>>($"{Endpoints.OrdersEndpoint}");
    }
}

// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TPharmacy.Server.Data;

namespace TPharmacy.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "staff",
                            ConcurrencyStamp = "b4a5cbd9-07de-405d-8f70-ac0ba5a1d8d8",
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        },
                        new
                        {
                            Id = "customer",
                            ConcurrencyStamp = "c8bb99ab-983a-4fb3-a18d-ba41f973df00",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = "admin",
                            ConcurrencyStamp = "52136779-37a6-4b7b-a5e3-82f52f06407c",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "pharmacist",
                            ConcurrencyStamp = "d91b9a48-6448-44ba-824f-1fc462c6adac",
                            Name = "Pharmacist",
                            NormalizedName = "PHARMACIST"
                        },
                        new
                        {
                            Id = "packer",
                            ConcurrencyStamp = "aa7cf2f0-a08a-4753-84cd-d0bfea5b5469",
                            Name = "Packer",
                            NormalizedName = "PACKER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102s1",
                            RoleId = "staff"
                        },
                        new
                        {
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102s1",
                            RoleId = "admin"
                        },
                        new
                        {
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102s2",
                            RoleId = "staff"
                        },
                        new
                        {
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102s2",
                            RoleId = "pharmacist"
                        },
                        new
                        {
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102s3",
                            RoleId = "staff"
                        },
                        new
                        {
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102s3",
                            RoleId = "packer"
                        },
                        new
                        {
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102c1",
                            RoleId = "customer"
                        },
                        new
                        {
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102c2",
                            RoleId = "customer"
                        },
                        new
                        {
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102c3",
                            RoleId = "customer"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TPharmacy.Server.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "3781efa7-66dc-47f0-860f-e506d04102s1",
                            AccessFailedCount = 0,
                            Address = "TPharmacy",
                            ConcurrencyStamp = "81151447-a72c-44fe-898d-88ee3dc6069a",
                            Email = "june@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "June",
                            LastName = "Staff",
                            LockoutEnabled = true,
                            NormalizedEmail = "JUNE@GMAIL.COM",
                            NormalizedUserName = "JUNE@GMAIL.COM",
                            Password = "June1234*",
                            PasswordHash = "AQAAAAEAACcQAAAAEGBwm2YTbLlORV7kjLDAmDNBlc/Rw1gx2iL4P3p9Zx3jCOKpbD1xlfe7nOY6AkoGpg==",
                            PhoneNumber = "9273 8983",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "ceb670e4-f0a4-4e64-aaa0-bcd33fecb5c8",
                            TwoFactorEnabled = false,
                            UserName = "june@gmail.com"
                        },
                        new
                        {
                            Id = "3781efa7-66dc-47f0-860f-e506d04102s2",
                            AccessFailedCount = 0,
                            Address = "TPharmacy",
                            ConcurrencyStamp = "593a9962-7f52-4801-8ef6-17c3774a4ec7",
                            Email = "woon@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Woon",
                            LastName = "Staff",
                            LockoutEnabled = true,
                            NormalizedEmail = "WOON@GMAIL.COM",
                            NormalizedUserName = "WOON@GMAIL.COM",
                            Password = "P@ssword1",
                            PasswordHash = "AQAAAAEAACcQAAAAEHBYpPscKaDtmGqlE9Ut7qQWC0u5ZOAtmc7FFgYStEmJJtcDXCrdOR2Te5FhEIa0TQ==",
                            PhoneNumber = "9287 2324",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "b69e1b2d-e990-4a72-ac7a-1d3191ef9767",
                            TwoFactorEnabled = false,
                            UserName = "woon@gmail.com"
                        },
                        new
                        {
                            Id = "3781efa7-66dc-47f0-860f-e506d04102s3",
                            AccessFailedCount = 0,
                            Address = "TPharmacy",
                            ConcurrencyStamp = "cb4dd937-07c1-45c3-beef-7d0e60f39dd4",
                            Email = "kate@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Kate",
                            LastName = "Staff",
                            LockoutEnabled = true,
                            NormalizedEmail = "KATE@GMAIL.COM",
                            NormalizedUserName = "KATE@GMAIL.COM",
                            Password = "Kate1234*",
                            PasswordHash = "AQAAAAEAACcQAAAAENAYtBOkf43Cdw5PHlWcWAAUcOjTB3v57Q2BbmMvk7VRn0JkdcskG+ynQ6bkQejwhg==",
                            PhoneNumber = "6329 9823",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "52ed2410-7890-440c-bf93-654b624d94c1",
                            TwoFactorEnabled = false,
                            UserName = "kate@gmail.com"
                        },
                        new
                        {
                            Id = "3781efa7-66dc-47f0-860f-e506d04102c1",
                            AccessFailedCount = 0,
                            Address = "Tampines Ave 1",
                            ConcurrencyStamp = "4f611f50-73bf-431e-89b1-fc86c8b92e77",
                            Email = "james@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "James",
                            LastName = "Customer",
                            LockoutEnabled = true,
                            NormalizedEmail = "JAMES@GMAIL.COM",
                            NormalizedUserName = "JAMES@GMAIL.COM",
                            Password = "James1234*",
                            PasswordHash = "AQAAAAEAACcQAAAAEMt8rlFfP018EoN8yA6+F1Vr2O93pLXvoozqWpkWJIqIVOUTmH6WAy03JybYLXLwpA==",
                            PhoneNumber = "8211 7319",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "8fa9e225-9378-4b5a-9bd5-5dc6df32735a",
                            TwoFactorEnabled = false,
                            UserName = "james@gmail.com"
                        },
                        new
                        {
                            Id = "3781efa7-66dc-47f0-860f-e506d04102c2",
                            AccessFailedCount = 0,
                            Address = "Bedok Ave 1",
                            ConcurrencyStamp = "d7ac6ae7-7dcb-4c0f-96b5-bada767a119c",
                            Email = "alice@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Alice",
                            LastName = "Customer",
                            LockoutEnabled = true,
                            NormalizedEmail = "ALICE@GMAIL.COM",
                            NormalizedUserName = "ALICE@GMAIL.COM",
                            Password = "Alice1234*",
                            PasswordHash = "AQAAAAEAACcQAAAAEGDKXw5k9kaq6UlO1VWxGBp52NelQkyvun2gxk9L8ut2Kxt5l6LO9CwblZymfLy2fw==",
                            PhoneNumber = "8329 7433",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "fd064877-aba4-4c20-b58d-d1eafe8fe28d",
                            TwoFactorEnabled = false,
                            UserName = "alice@gmail.com"
                        },
                        new
                        {
                            Id = "3781efa7-66dc-47f0-860f-e506d04102c3",
                            AccessFailedCount = 0,
                            Address = "Jurong Ave 1",
                            ConcurrencyStamp = "ff3b597a-4513-44dc-92ac-d93307a00c2a",
                            Email = "sheila@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Sheila",
                            LastName = "Customer",
                            LockoutEnabled = true,
                            NormalizedEmail = "SHEILA@GMAIL.COM",
                            NormalizedUserName = "SHEILA@GMAIL.COM",
                            Password = "Sheila1234*",
                            PasswordHash = "AQAAAAEAACcQAAAAEG4vG5KSkvQXTDWNSH1kXsu33B3sILRrRomfd1irluSudn/rzuwTih8HNhYXUY5uww==",
                            PhoneNumber = "9436 7238",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "b79b50ac-3f2f-4b17-be3e-bc8f6ddcb8c6",
                            TwoFactorEnabled = false,
                            UserName = "sheila@gmail.com"
                        });
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Consultation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ConDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ConEndTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ConFee")
                        .HasColumnType("decimal(7,2)");

                    b.Property<DateTime>("ConStartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CusID")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("StaffID")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("StaffID");

                    b.ToTable("Consultations");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            ConDate = new DateTime(2023, 1, 8, 3, 55, 48, 85, DateTimeKind.Local).AddTicks(4271),
                            ConDesc = "Flu Consultation",
                            ConEndTime = new DateTime(2023, 1, 8, 5, 4, 48, 85, DateTimeKind.Local).AddTicks(4605),
                            ConFee = 35.50m,
                            ConStartTime = new DateTime(2023, 1, 8, 3, 55, 48, 85, DateTimeKind.Local).AddTicks(4466),
                            CreatedBy = "Woon",
                            CusID = 1,
                            DateCreated = new DateTime(2023, 1, 8, 3, 55, 48, 85, DateTimeKind.Local).AddTicks(5188),
                            DateUpdated = new DateTime(2023, 1, 8, 3, 55, 48, 85, DateTimeKind.Local).AddTicks(5190),
                            StaffID = 1,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 2,
                            ConDate = new DateTime(2023, 1, 8, 3, 55, 48, 85, DateTimeKind.Local).AddTicks(5194),
                            ConDesc = "Eczema Consultation",
                            ConEndTime = new DateTime(2023, 1, 8, 4, 55, 48, 85, DateTimeKind.Local).AddTicks(5196),
                            ConFee = 30.50m,
                            ConStartTime = new DateTime(2023, 1, 8, 3, 55, 48, 85, DateTimeKind.Local).AddTicks(5195),
                            CreatedBy = "Woon",
                            CusID = 3,
                            DateCreated = new DateTime(2023, 1, 8, 3, 55, 48, 85, DateTimeKind.Local).AddTicks(5201),
                            DateUpdated = new DateTime(2023, 1, 8, 3, 55, 48, 85, DateTimeKind.Local).AddTicks(5203),
                            StaffID = 1,
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Customer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CusAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CusEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CusName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CusPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CusPoints")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedBy = "System",
                            CusAddress = "Tampines Ave 1",
                            CusEmail = "james@gmail.com",
                            CusName = "James",
                            CusPassword = "James1234*",
                            CusPoints = 100,
                            DateCreated = new DateTime(2023, 1, 8, 3, 55, 48, 83, DateTimeKind.Local).AddTicks(3469),
                            DateUpdated = new DateTime(2023, 1, 8, 3, 55, 48, 83, DateTimeKind.Local).AddTicks(3473),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 2,
                            CreatedBy = "System",
                            CusAddress = "Bedok Ave 1",
                            CusEmail = "alice@gmail.com",
                            CusName = "Alice",
                            CusPassword = "Alice1234*",
                            CusPoints = 50,
                            DateCreated = new DateTime(2023, 1, 8, 3, 55, 48, 83, DateTimeKind.Local).AddTicks(3477),
                            DateUpdated = new DateTime(2023, 1, 8, 3, 55, 48, 83, DateTimeKind.Local).AddTicks(3478),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 3,
                            CreatedBy = "System",
                            CusAddress = "Jurong Ave 1",
                            CusEmail = "grey@gmail.com",
                            CusName = "Grey",
                            CusPassword = "Grey1234*",
                            CusPoints = 89,
                            DateCreated = new DateTime(2023, 1, 8, 3, 55, 48, 83, DateTimeKind.Local).AddTicks(3480),
                            DateUpdated = new DateTime(2023, 1, 8, 3, 55, 48, 83, DateTimeKind.Local).AddTicks(3481),
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Order", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CusID")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderDateTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OrderPrice")
                        .HasColumnType("decimal(7,2)");

                    b.Property<int>("StaffID")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("StaffID");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedBy = "System",
                            CusID = 1,
                            DateCreated = new DateTime(2023, 1, 8, 3, 55, 48, 83, DateTimeKind.Local).AddTicks(6524),
                            DateUpdated = new DateTime(2023, 1, 8, 3, 55, 48, 83, DateTimeKind.Local).AddTicks(6527),
                            OrderDateTime = new DateTime(2023, 1, 8, 3, 55, 48, 83, DateTimeKind.Local).AddTicks(6107),
                            OrderPrice = 128.00m,
                            StaffID = 3,
                            UpdatedBy = "Kate"
                        },
                        new
                        {
                            ID = 2,
                            CreatedBy = "System",
                            CusID = 2,
                            DateCreated = new DateTime(2023, 1, 8, 3, 55, 48, 83, DateTimeKind.Local).AddTicks(6534),
                            DateUpdated = new DateTime(2023, 1, 8, 3, 55, 48, 83, DateTimeKind.Local).AddTicks(6535),
                            OrderDateTime = new DateTime(2023, 1, 8, 3, 55, 48, 83, DateTimeKind.Local).AddTicks(6533),
                            OrderPrice = 90.00m,
                            StaffID = 3,
                            UpdatedBy = "Kate"
                        });
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.OrderItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("OrderItemQtny")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("OrderID");

                    b.HasIndex("ProductID");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2023, 1, 8, 3, 55, 48, 84, DateTimeKind.Local).AddTicks(234),
                            DateUpdated = new DateTime(2023, 1, 8, 3, 55, 48, 84, DateTimeKind.Local).AddTicks(243),
                            OrderID = 1,
                            OrderItemQtny = 2,
                            ProductID = 1,
                            UpdatedBy = "Kate"
                        },
                        new
                        {
                            ID = 2,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2023, 1, 8, 3, 55, 48, 84, DateTimeKind.Local).AddTicks(247),
                            DateUpdated = new DateTime(2023, 1, 8, 3, 55, 48, 84, DateTimeKind.Local).AddTicks(248),
                            OrderID = 1,
                            OrderItemQtny = 1,
                            ProductID = 2,
                            UpdatedBy = "Kate"
                        },
                        new
                        {
                            ID = 3,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2023, 1, 8, 3, 55, 48, 84, DateTimeKind.Local).AddTicks(250),
                            DateUpdated = new DateTime(2023, 1, 8, 3, 55, 48, 84, DateTimeKind.Local).AddTicks(251),
                            OrderID = 2,
                            OrderItemQtny = 1,
                            ProductID = 3,
                            UpdatedBy = "Kate"
                        });
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Payment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<string>("PayCardInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PayFee")
                        .HasColumnType("decimal(7,2)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("OrderID");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2023, 1, 8, 3, 55, 48, 84, DateTimeKind.Local).AddTicks(6283),
                            DateUpdated = new DateTime(2023, 1, 8, 3, 55, 48, 84, DateTimeKind.Local).AddTicks(6293),
                            OrderID = 1,
                            PayCardInfo = "7855-3798-2344-9853",
                            PayFee = 5.00m,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 2,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2023, 1, 8, 3, 55, 48, 84, DateTimeKind.Local).AddTicks(6298),
                            DateUpdated = new DateTime(2023, 1, 8, 3, 55, 48, 84, DateTimeKind.Local).AddTicks(6299),
                            OrderID = 2,
                            PayCardInfo = "3244-2355-3459-9767",
                            PayFee = 15.00m,
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Prescription", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConID")
                        .HasColumnType("int");

                    b.Property<int?>("ConsultationID")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("PresQty")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ConsultationID");

                    b.HasIndex("ProductID");

                    b.ToTable("Prescriptions");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            ConID = 1,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2023, 1, 8, 3, 55, 48, 84, DateTimeKind.Local).AddTicks(9561),
                            DateUpdated = new DateTime(2023, 1, 8, 3, 55, 48, 84, DateTimeKind.Local).AddTicks(9568),
                            PresQty = 1,
                            ProductID = 4,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 2,
                            ConID = 2,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2023, 1, 8, 3, 55, 48, 84, DateTimeKind.Local).AddTicks(9572),
                            DateUpdated = new DateTime(2023, 1, 8, 3, 55, 48, 84, DateTimeKind.Local).AddTicks(9574),
                            PresQty = 2,
                            ProductID = 4,
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProdBrand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProdCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProdDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProdName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ProdPrice")
                        .HasColumnType("decimal(7,2)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2023, 1, 8, 3, 55, 48, 80, DateTimeKind.Local).AddTicks(1833),
                            DateUpdated = new DateTime(2023, 1, 8, 3, 55, 48, 81, DateTimeKind.Local).AddTicks(7860),
                            ProdBrand = "Blackmores",
                            ProdCategory = "Supplement",
                            ProdDesc = "1000mg Vitamin C 120 Tablets",
                            ProdName = "Vitamin C",
                            ProdPrice = 35.00m,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 2,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2023, 1, 8, 3, 55, 48, 81, DateTimeKind.Local).AddTicks(8500),
                            DateUpdated = new DateTime(2023, 1, 8, 3, 55, 48, 81, DateTimeKind.Local).AddTicks(8504),
                            ProdBrand = "Swisse",
                            ProdCategory = "Supplement",
                            ProdDesc = "1500mg 100 Tablets",
                            ProdName = "Omega 3 Fish Oil",
                            ProdPrice = 58.00m,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 3,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2023, 1, 8, 3, 55, 48, 81, DateTimeKind.Local).AddTicks(8507),
                            DateUpdated = new DateTime(2023, 1, 8, 3, 55, 48, 81, DateTimeKind.Local).AddTicks(8508),
                            ProdBrand = "Wastons",
                            ProdCategory = "Supplement",
                            ProdDesc = "500mg 150 Tablets",
                            ProdName = "Calcium",
                            ProdPrice = 45.00m,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 4,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2023, 1, 8, 3, 55, 48, 81, DateTimeKind.Local).AddTicks(8509),
                            DateUpdated = new DateTime(2023, 1, 8, 3, 55, 48, 81, DateTimeKind.Local).AddTicks(8510),
                            ProdBrand = "Telfast",
                            ProdCategory = "Prescriptions",
                            ProdDesc = "10mg",
                            ProdName = "Panadol",
                            ProdPrice = 20.00m,
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Staff", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("StafEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StafName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StafPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StafRole")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Staffs");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedBy = "June",
                            DateCreated = new DateTime(2023, 1, 8, 3, 55, 48, 83, DateTimeKind.Local).AddTicks(411),
                            DateUpdated = new DateTime(2023, 1, 8, 3, 55, 48, 83, DateTimeKind.Local).AddTicks(419),
                            StafEmail = "june@gmail.com",
                            StafName = "June",
                            StafPassword = "June1234*",
                            StafRole = "Admin",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 2,
                            CreatedBy = "June",
                            DateCreated = new DateTime(2023, 1, 8, 3, 55, 48, 83, DateTimeKind.Local).AddTicks(424),
                            DateUpdated = new DateTime(2023, 1, 8, 3, 55, 48, 83, DateTimeKind.Local).AddTicks(425),
                            StafEmail = "woon@gmail.com",
                            StafName = "Woon",
                            StafPassword = "Woon1234*",
                            StafRole = "Pharmacist",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 3,
                            CreatedBy = "June",
                            DateCreated = new DateTime(2023, 1, 8, 3, 55, 48, 83, DateTimeKind.Local).AddTicks(427),
                            DateUpdated = new DateTime(2023, 1, 8, 3, 55, 48, 83, DateTimeKind.Local).AddTicks(428),
                            StafEmail = "kate@gmail.com",
                            StafName = "Kate",
                            StafPassword = "Kate1234*",
                            StafRole = "Packer",
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TPharmacy.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TPharmacy.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPharmacy.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TPharmacy.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Consultation", b =>
                {
                    b.HasOne("TPharmacy.Shared.Domain.Customer", "Customer")
                        .WithMany("Consultations")
                        .HasForeignKey("CustomerID");

                    b.HasOne("TPharmacy.Shared.Domain.Staff", "Staff")
                        .WithMany("Consultations")
                        .HasForeignKey("StaffID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Order", b =>
                {
                    b.HasOne("TPharmacy.Shared.Domain.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerID");

                    b.HasOne("TPharmacy.Shared.Domain.Staff", "Staff")
                        .WithMany("Orders")
                        .HasForeignKey("StaffID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.OrderItem", b =>
                {
                    b.HasOne("TPharmacy.Shared.Domain.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPharmacy.Shared.Domain.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Payment", b =>
                {
                    b.HasOne("TPharmacy.Shared.Domain.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Prescription", b =>
                {
                    b.HasOne("TPharmacy.Shared.Domain.Consultation", "Consultation")
                        .WithMany("Prescriptions")
                        .HasForeignKey("ConsultationID");

                    b.HasOne("TPharmacy.Shared.Domain.Product", "Product")
                        .WithMany("Prescriptions")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultation");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Consultation", b =>
                {
                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Customer", b =>
                {
                    b.Navigation("Consultations");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Order", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Product", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Staff", b =>
                {
                    b.Navigation("Consultations");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}

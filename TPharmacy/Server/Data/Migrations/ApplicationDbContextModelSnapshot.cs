// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TPharmacy.Server.Data;

namespace TPharmacy.Server.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("x`")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "ad2bcf0c-20db-474f-8407-5a6b159518ba",
                            ConcurrencyStamp = "403a8062-6472-4234-b2ac-c651cdcca513",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "bd2bcf0c-20db-474f-8407-5a6b159518bb",
                            ConcurrencyStamp = "4a6f6f91-8561-4c16-92b7-7f9dde0d9523",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102e4",
                            RoleId = "ad2bcf0c-20db-474f-8407-5a6b159518ba"
                        },
                        new
                        {
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102e5",
                            RoleId = "ad2bcf0c-20db-474f-8407-5a6b159518ba"
                        },
                        new
                        {
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102c4",
                            RoleId = "bd2bcf0c-20db-474f-8407-5a6b159518bb"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TPharmacy.Server.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "3781efa7-66dc-47f0-860f-e506d04102e4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c32c70e2-eeab-4a0a-be60-b3b3663edd24",
                            Email = "admin@localhost.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@LOCALHOST.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEFachoZsDIRafU5dZduoejMlGucHfnwO5JlVxYm4olVRuK55osgYBtGNgHnLCRKGBg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fdbbf15d-1774-48a8-b367-88f392f423dc",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "3781efa7-66dc-47f0-860f-e506d04102e5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ce414245-203d-4159-9a8b-8758390e319b",
                            Email = "june@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "JUNE@GMAIL.COM",
                            NormalizedUserName = "JUNE",
                            PasswordHash = "AQAAAAEAACcQAAAAEIYsDNfSm9HOQHN2jMpb8o3j1KIokC80F2IZvTmaKSQ2W/Eap0zvwazIv1VjdupRXA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "70a10d3d-ec55-4ca5-ba9f-f2865cfaa4a2",
                            TwoFactorEnabled = false,
                            UserName = "June"
                        },
                        new
                        {
                            Id = "3781efa7-66dc-47f0-860f-e506d04102c4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2c99ffe4-bb5a-4983-8ef1-bffeca9e9e14",
                            Email = "james@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Customer",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "JAMES@GMAIL.COM",
                            NormalizedUserName = "CUSTOMER",
                            PasswordHash = "AQAAAAEAACcQAAAAEDYzuaMavkfEYLBreSqTJSBambKJd+dEOAvNcuWlI2986FtUtihw7v7G1g+9bvXSxA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ba2d8d61-eb9c-40ea-953f-70f9a4787e64",
                            TwoFactorEnabled = false,
                            UserName = "Customer"
                        });
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Consultation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ConDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ConEndTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ConFee")
                        .HasColumnType("decimal(7,2)");

                    b.Property<DateTime>("ConStartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CusID")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataUpdated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("StaffID")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("StaffID");

                    b.ToTable("Consultations");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            ConDate = new DateTime(2022, 12, 18, 14, 2, 21, 230, DateTimeKind.Local).AddTicks(6858),
                            ConDesc = "Flu Consultation",
                            ConEndTime = new DateTime(2022, 12, 18, 15, 11, 21, 230, DateTimeKind.Local).AddTicks(8247),
                            ConFee = 35.50m,
                            ConStartTime = new DateTime(2022, 12, 18, 14, 2, 21, 230, DateTimeKind.Local).AddTicks(7435),
                            CreatedBy = "Woon",
                            CusID = 1,
                            DataUpdated = new DateTime(2022, 12, 18, 14, 2, 21, 231, DateTimeKind.Local).AddTicks(1010),
                            DateCreated = new DateTime(2022, 12, 18, 14, 2, 21, 231, DateTimeKind.Local).AddTicks(996),
                            StaffID = 1,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 2,
                            ConDate = new DateTime(2022, 12, 18, 14, 2, 21, 231, DateTimeKind.Local).AddTicks(1021),
                            ConDesc = "Eczema Consultation",
                            ConEndTime = new DateTime(2022, 12, 18, 15, 2, 21, 231, DateTimeKind.Local).AddTicks(1025),
                            ConFee = 30.50m,
                            ConStartTime = new DateTime(2022, 12, 18, 14, 2, 21, 231, DateTimeKind.Local).AddTicks(1023),
                            CreatedBy = "Woon",
                            CusID = 3,
                            DataUpdated = new DateTime(2022, 12, 18, 14, 2, 21, 231, DateTimeKind.Local).AddTicks(1047),
                            DateCreated = new DateTime(2022, 12, 18, 14, 2, 21, 231, DateTimeKind.Local).AddTicks(1045),
                            StaffID = 1,
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Customer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CusAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CusEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CusName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CusPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CusPoints")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataUpdated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedBy = "System",
                            CusAddress = "Tampines Ave 1",
                            CusEmail = "james@gmail.com",
                            CusName = "James",
                            CusPassword = "James1234*",
                            CusPoints = 100,
                            DataUpdated = new DateTime(2022, 12, 18, 14, 2, 21, 227, DateTimeKind.Local).AddTicks(9763),
                            DateCreated = new DateTime(2022, 12, 18, 14, 2, 21, 227, DateTimeKind.Local).AddTicks(9754),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 2,
                            CreatedBy = "System",
                            CusAddress = "Bedok Ave 1",
                            CusEmail = "alice@gmail.com",
                            CusName = "Alice",
                            CusPassword = "Alice1234*",
                            CusPoints = 50,
                            DataUpdated = new DateTime(2022, 12, 18, 14, 2, 21, 227, DateTimeKind.Local).AddTicks(9770),
                            DateCreated = new DateTime(2022, 12, 18, 14, 2, 21, 227, DateTimeKind.Local).AddTicks(9769),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 3,
                            CreatedBy = "System",
                            CusAddress = "Temasek Polytechnic",
                            CusEmail = "grey@gmail.com",
                            CusName = "Grey",
                            CusPassword = "Grey1234*",
                            CusPoints = 89,
                            DataUpdated = new DateTime(2022, 12, 18, 14, 2, 21, 227, DateTimeKind.Local).AddTicks(9775),
                            DateCreated = new DateTime(2022, 12, 18, 14, 2, 21, 227, DateTimeKind.Local).AddTicks(9773),
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Order", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CusID")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataUpdated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderDateTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OrderPrice")
                        .HasColumnType("decimal(7,2)");

                    b.Property<int>("StaffID")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("StaffID");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedBy = "System",
                            CusID = 1,
                            DataUpdated = new DateTime(2022, 12, 18, 14, 2, 21, 228, DateTimeKind.Local).AddTicks(5384),
                            DateCreated = new DateTime(2022, 12, 18, 14, 2, 21, 228, DateTimeKind.Local).AddTicks(5379),
                            OrderDateTime = new DateTime(2022, 12, 18, 14, 2, 21, 228, DateTimeKind.Local).AddTicks(4765),
                            OrderPrice = 128.00m,
                            StaffID = 3,
                            UpdatedBy = "Kate"
                        },
                        new
                        {
                            ID = 2,
                            CreatedBy = "System",
                            CusID = 2,
                            DataUpdated = new DateTime(2022, 12, 18, 14, 2, 21, 228, DateTimeKind.Local).AddTicks(5394),
                            DateCreated = new DateTime(2022, 12, 18, 14, 2, 21, 228, DateTimeKind.Local).AddTicks(5392),
                            OrderDateTime = new DateTime(2022, 12, 18, 14, 2, 21, 228, DateTimeKind.Local).AddTicks(5390),
                            OrderPrice = 90.00m,
                            StaffID = 3,
                            UpdatedBy = "Kate"
                        });
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.OrderItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataUpdated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("OrderQtny")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("OrderID");

                    b.HasIndex("ProductID");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedBy = "System",
                            DataUpdated = new DateTime(2022, 12, 18, 14, 2, 21, 229, DateTimeKind.Local).AddTicks(464),
                            DateCreated = new DateTime(2022, 12, 18, 14, 2, 21, 229, DateTimeKind.Local).AddTicks(454),
                            OrderID = 1,
                            OrderQtny = 2,
                            ProductID = 1,
                            UpdatedBy = "Kate"
                        },
                        new
                        {
                            ID = 2,
                            CreatedBy = "System",
                            DataUpdated = new DateTime(2022, 12, 18, 14, 2, 21, 229, DateTimeKind.Local).AddTicks(471),
                            DateCreated = new DateTime(2022, 12, 18, 14, 2, 21, 229, DateTimeKind.Local).AddTicks(469),
                            OrderID = 1,
                            OrderQtny = 1,
                            ProductID = 2,
                            UpdatedBy = "Kate"
                        },
                        new
                        {
                            ID = 3,
                            CreatedBy = "System",
                            DataUpdated = new DateTime(2022, 12, 18, 14, 2, 21, 229, DateTimeKind.Local).AddTicks(475),
                            DateCreated = new DateTime(2022, 12, 18, 14, 2, 21, 229, DateTimeKind.Local).AddTicks(474),
                            OrderID = 2,
                            OrderQtny = 1,
                            ProductID = 3,
                            UpdatedBy = "Kate"
                        });
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Payment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataUpdated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<string>("PayCardInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PayFee")
                        .HasColumnType("decimal(7,2)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("OrderID");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedBy = "System",
                            DataUpdated = new DateTime(2022, 12, 18, 14, 2, 21, 229, DateTimeKind.Local).AddTicks(5458),
                            DateCreated = new DateTime(2022, 12, 18, 14, 2, 21, 229, DateTimeKind.Local).AddTicks(5447),
                            OrderID = 1,
                            PayCardInfo = "7855-3798-2344-9853",
                            PayFee = 128.00m,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 2,
                            CreatedBy = "System",
                            DataUpdated = new DateTime(2022, 12, 18, 14, 2, 21, 229, DateTimeKind.Local).AddTicks(5466),
                            DateCreated = new DateTime(2022, 12, 18, 14, 2, 21, 229, DateTimeKind.Local).AddTicks(5464),
                            OrderID = 2,
                            PayCardInfo = "3244-2355-3459-9767",
                            PayFee = 103.00m,
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Prescription", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConID")
                        .HasColumnType("int");

                    b.Property<int?>("ConsultationID")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataUpdated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("PresQty")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ConsultationID");

                    b.HasIndex("ProductID");

                    b.ToTable("Prescriptions");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            ConID = 1,
                            CreatedBy = "System",
                            DataUpdated = new DateTime(2022, 12, 18, 14, 2, 21, 229, DateTimeKind.Local).AddTicks(9601),
                            DateCreated = new DateTime(2022, 12, 18, 14, 2, 21, 229, DateTimeKind.Local).AddTicks(9592),
                            PresQty = 1,
                            ProductID = 1,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 2,
                            ConID = 2,
                            CreatedBy = "System",
                            DataUpdated = new DateTime(2022, 12, 18, 14, 2, 21, 229, DateTimeKind.Local).AddTicks(9608),
                            DateCreated = new DateTime(2022, 12, 18, 14, 2, 21, 229, DateTimeKind.Local).AddTicks(9606),
                            PresQty = 2,
                            ProductID = 3,
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataUpdated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProdBrand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProdDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProdName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ProdPrice")
                        .HasColumnType("decimal(7,2)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedBy = "System",
                            DataUpdated = new DateTime(2022, 12, 18, 14, 2, 21, 225, DateTimeKind.Local).AddTicks(5200),
                            DateCreated = new DateTime(2022, 12, 18, 14, 2, 21, 224, DateTimeKind.Local).AddTicks(3695),
                            ProdBrand = "Blackmores",
                            ProdDesc = "BLACKMORES Bio 1000mg Vitamin C 120 Tablets",
                            ProdName = "Vitamin C",
                            ProdPrice = 35.00m,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 2,
                            CreatedBy = "System",
                            DataUpdated = new DateTime(2022, 12, 18, 14, 2, 21, 225, DateTimeKind.Local).AddTicks(6123),
                            DateCreated = new DateTime(2022, 12, 18, 14, 2, 21, 225, DateTimeKind.Local).AddTicks(6118),
                            ProdBrand = "Swisse",
                            ProdDesc = "Omega 3 Fish Oil 1500mg 100 Tablets",
                            ProdName = "Omega 3 Fish Oil",
                            ProdPrice = 58.00m,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 3,
                            CreatedBy = "System",
                            DataUpdated = new DateTime(2022, 12, 18, 14, 2, 21, 225, DateTimeKind.Local).AddTicks(6128),
                            DateCreated = new DateTime(2022, 12, 18, 14, 2, 21, 225, DateTimeKind.Local).AddTicks(6127),
                            ProdBrand = "Wastons",
                            ProdDesc = "Calcium 500mg 150 Tablets",
                            ProdName = "Calcium",
                            ProdPrice = 45.00m,
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Staff", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataUpdated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("StafEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StafName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StafPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StafRole")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Staffs");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedBy = "June",
                            DataUpdated = new DateTime(2022, 12, 18, 14, 2, 21, 227, DateTimeKind.Local).AddTicks(3838),
                            DateCreated = new DateTime(2022, 12, 18, 14, 2, 21, 227, DateTimeKind.Local).AddTicks(3821),
                            StafEmail = "woon@gmail.com",
                            StafName = "Woon",
                            StafPassword = "Woon1234*",
                            StafRole = "Pharmacist",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 2,
                            CreatedBy = "June",
                            DataUpdated = new DateTime(2022, 12, 18, 14, 2, 21, 227, DateTimeKind.Local).AddTicks(3845),
                            DateCreated = new DateTime(2022, 12, 18, 14, 2, 21, 227, DateTimeKind.Local).AddTicks(3844),
                            StafEmail = "june@gmail.com",
                            StafName = "June",
                            StafPassword = "June1234*",
                            StafRole = "Admin",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 3,
                            CreatedBy = "June",
                            DataUpdated = new DateTime(2022, 12, 18, 14, 2, 21, 227, DateTimeKind.Local).AddTicks(3850),
                            DateCreated = new DateTime(2022, 12, 18, 14, 2, 21, 227, DateTimeKind.Local).AddTicks(3848),
                            StafEmail = "kate@gmail.com",
                            StafName = "Kate",
                            StafPassword = "Kate1234*",
                            StafRole = "Packer",
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TPharmacy.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TPharmacy.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPharmacy.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TPharmacy.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Consultation", b =>
                {
                    b.HasOne("TPharmacy.Shared.Domain.Customer", "Customer")
                        .WithMany("Consultations")
                        .HasForeignKey("CustomerID");

                    b.HasOne("TPharmacy.Shared.Domain.Staff", "Staff")
                        .WithMany("Consultations")
                        .HasForeignKey("StaffID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Order", b =>
                {
                    b.HasOne("TPharmacy.Shared.Domain.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerID");

                    b.HasOne("TPharmacy.Shared.Domain.Staff", "Staff")
                        .WithMany("Orders")
                        .HasForeignKey("StaffID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.OrderItem", b =>
                {
                    b.HasOne("TPharmacy.Shared.Domain.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPharmacy.Shared.Domain.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Payment", b =>
                {
                    b.HasOne("TPharmacy.Shared.Domain.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Prescription", b =>
                {
                    b.HasOne("TPharmacy.Shared.Domain.Consultation", "Consultation")
                        .WithMany("Prescriptions")
                        .HasForeignKey("ConsultationID");

                    b.HasOne("TPharmacy.Shared.Domain.Product", "Product")
                        .WithMany("Prescriptions")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultation");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Consultation", b =>
                {
                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Customer", b =>
                {
                    b.Navigation("Consultations");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Order", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Product", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Staff", b =>
                {
                    b.Navigation("Consultations");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
